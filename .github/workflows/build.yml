name: Build Status

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~ Build Triggers ~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
on:
  push:
    branches:
      - master
    tags:
      - v*
    paths-ignore:
      - AUTHORS
      - CHANGELOG.md
      - CONTRIBUTING.md
      - LICENSE
      - README.md
      - binder/
      - docs/
      - examples/
      - python/perspective/README.md
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~ Build Matrix ~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
jobs:
  ##########################################################################################################################
  ##########################################################################################################################

  ###################################
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  #~~~~~~~~~~~/#######|~~~~~~~~~~~~~#
  #~~~~~~~~~~/########|~~~~~~~~~~~~~#
  #~~~~~~~~~/###/~|###|~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~|###|~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~|###|~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~|###|~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~|###|~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  # Stage One - Build the JS Assets #
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  build_js:
    strategy:
      matrix:
        os:
          - ubuntu-latest # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-Readme.md
        python-version:
          - 3.9
        node-version: [16.x]

    ##################################
    # Setup matrix job configuration #
    ##################################
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    ##########
    # Caches #
    ##########
    ################
    # Yarn Cache
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Setup yarn cache
      uses: actions/cache@v3
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Setup emsdk cache
      uses: actions/cache@v3
      id: emsdk-cache
      with:
        path: .emsdk
        key: ${{ runner.os }}-emsdk-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-emsdk-

    ################
    # Pip Cache
    - name: Setup pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    ################
    # Cargo Cache
    - name: Setup cargo cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          rust/perspective-viewer/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    ################
    # Build Assets
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}-${{ matrix.os }}

    ###############################
    # Language and Compiler Setup #
    ###############################
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
        cache-dependency-path: yarn.lock

    - name: Install latest nightly rust
      uses: actions-rs/toolchain@v1
      with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy, rust-src

    ################
    # Dependencies #
    ################
    ################
    # JS
    - name: Install yarn
      run: npm install -g yarn

    - name: Install js dependencies
      run: yarn

    ################
    # Python
    - name: Install python dependencies
      run: python -m pip install --upgrade "jupyterlab>=3.4"

    ################
    # Linux
    - name: Linux init steps
      run: sudo node scripts/install_tools.js
      if: ${{ runner.os == 'Linux' }}

    - name: Install CCache
      run: sudo apt install -y ccache

    ################
    # Wasm
    - name: Install wasm-pack (Linux and Macos)
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      if: ${{ runner.os != 'Windows' }}

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~ Build Pipelines ~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    ###############
    # WebAssembly #
    ###############
    - name: WebAssembly Lint
      run: yarn lint_js

    - name: WebAssembly Build
      run: yarn build_js --ci
      env:
        PSP_USE_CCACHE: 1

    #################################
    # Compress and upload Artifacts #
    #################################
    ######################################
    # Upload built JS artifacts for tests
    #
    # (listed here in the same order they appear in the directory)
    - uses: actions/upload-artifact@v3
      with:
        name: perspective-build
        path: packages/perspective/dist/

    - uses: actions/upload-artifact@v3
      with:
        name: perspective-jupyterlab-build
        path: packages/perspective-jupyterlab/dist/

    - uses: actions/upload-artifact@v3
      with:
        name: perspective-viewer-d3fc-build
        path: packages/perspective-viewer-d3fc/dist

    - uses: actions/upload-artifact@v3
      with:
        name: perspective-viewer-datagrid-build
        path: packages/perspective-viewer-datagrid/dist

    - uses: actions/upload-artifact@v3
      with:
        name: perspective-workspace-build
        path: packages/perspective-workspace/dist

    - uses: actions/upload-artifact@v3
      with:
        name: perspective-viewer-build
        path: rust/perspective-viewer/dist

    - uses: actions/upload-artifact@v3
      with:
        name: perspective-viewer-build-build
        path: rust/perspective-viewer/build

    ######################################################
    # Upload Jupyter artifacts for python build/test/dist
    - uses: actions/upload-artifact@v3
      with:
        name: nbextension-build
        path: python/perspective/perspective/nbextension
        # if-no-files-found: error # TODO

    - uses: actions/upload-artifact@v3
      with:
        name: labextension-build
        path: python/perspective/perspective/labextension
        # if-no-files-found: error # TODO

  ##########################################################################################################################
  ##########################################################################################################################

  #######################################
  #~~~~~~~~~~~~~~~~~~~~~~~~~#
  #~~~~~~~~/########\~~~~~~~#
  #~~~~~~|###|~~~\###\~~~~~~#
  #~~~~~~~~~~~~~/###/~~~~~~~#
  #~~~~~~~~~~~/###/~~~~~~~~~#
  #~~~~~~~~~/###/~~~~~~~~~~~#
  #~~~~~~~/###/~~~~~~~~~~~~~#
  #~~~~~|#############|~~~~~#
  #~~~~~~~~~~~~~~~~~~~~~~~~~#
  # Stage Two - Lint Python #
  #~~~~~~~~~~~~~~~~~~~~~~~~~#
  lint_python:
    strategy:
      matrix:
        os:
          - ubuntu-latest # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-Readme.md
        python-version:
          - 3.9

    ##################################
    # Setup matrix job configuration #
    ##################################
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    ##########
    # Caches #
    ##########
    ################
    # Yarn Cache
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Setup yarn cache
      uses: actions/cache@v3
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    ################
    # Pip Cache
    - name: Setup pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    ###############################
    # Language and Compiler Setup #
    ###############################
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
        cache-dependency-path: yarn.lock

    ################
    # Dependencies #
    ################
    ################
    # JS
    - name: Install yarn
      run: npm install -g yarn

    - name: Install js dependencies
      run: yarn
      env:
        PSP_SKIP_EMSDK_INSTALL: 1

    ################
    # Python
    - name: Install python dependencies
      run: python -m pip install --upgrade "black==20.8b1" flake8-black

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~ Build Pipelines ~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #################
    # Python - Lint #
    #################
    ########
    # Linux
    - name: Python Lint Steps (Linux)
      run: yarn lint_python --ci
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}

  ##########################################################################################################################
  ##########################################################################################################################

  #############################
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  #~~~~~~~~~~/########\~~~~~~~#
  #~~~~~~~~~|##|~~~~|##|~~~~~~#
  #~~~~~~~~~~~~~~~~~|##|~~~~~~#
  #~~~~~~~~~~~~~|######|~~~~~~#
  #~~~~~~~~~~~~~~~~~|##|~~~~~~#
  #~~~~~~~~~|##|~~~~|##|~~~~~~#
  #~~~~~~~~~\#########/~~~~~~~#
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  # Stage Three - Test the JS #
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  test_js:
    needs: [build_js]

    strategy:
      matrix:
        os:
          - ubuntu-latest # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-Readme.md
        python-version:
          - 3.9
        node-version: [16.x]

    ##################################
    # Setup matrix job configuration #
    ##################################
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    ##########
    # Caches #
    ##########
    ################
    # Yarn Cache
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Setup yarn cache
      uses: actions/cache@v3
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    ################
    # Pip Cache
    - name: Setup pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    ################
    # Cargo Cache
    - name: Setup cargo cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          rust/perspective-viewer/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    ###############################
    # Language and Compiler Setup #
    ###############################
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
        cache-dependency-path: yarn.lock

    ################
    # Dependencies #
    ################
    ################
    # JS
    - name: Install yarn
      run: npm install -g yarn

    - name: Install js dependencies
      run: yarn
      env:
        PSP_SKIP_EMSDK_INSTALL: 1

    ################
    # Python
    - name: Install python dependencies
      run: python -m pip install --upgrade "jupyterlab>=3.4"

    ################
    # Wasm
    - name: Install wasm-pack (Linux and Macos)
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      if: ${{ runner.os != 'Windows' }}

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~ Build Pipelines ~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    - uses: actions/download-artifact@v3
      with:
        name: perspective-build
        path: packages/perspective/dist/

    - uses: actions/download-artifact@v3
      with:
        name: perspective-jupyterlab-build
        path: packages/perspective-jupyterlab/dist/

    - uses: actions/download-artifact@v3
      with:
        name: perspective-viewer-d3fc-build
        path: packages/perspective-viewer-d3fc/dist

    - uses: actions/download-artifact@v3
      with:
        name: perspective-viewer-datagrid-build
        path: packages/perspective-viewer-datagrid/dist

    - uses: actions/download-artifact@v3
      with:
        name: perspective-workspace-build
        path: packages/perspective-workspace/dist

    - uses: actions/download-artifact@v3
      with:
        name: perspective-viewer-build
        path: rust/perspective-viewer/dist

    - uses: actions/download-artifact@v3
      with:
        name: perspective-viewer-build-build
        path: rust/perspective-viewer/build

    ###############
    # WebAssembly #
    ###############
    - name: WebAssembly Test
      run: yarn test_js --quiet --ci
      env:
        PSP_DOCKER: 1 # FIXME run in container directly

  ##########################################################################################################################
  ##########################################################################################################################

  ########################################
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~|##|~~~~|##|~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~|##|~~~~|##|~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~|##|~~~~|##|~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~|##########|~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~~~~~~|##|~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~~~~~~|##|~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~~~~~~|##|~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  # Stage Four - Build the Python Assets #
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  build_python:
    ###################################################################
    # Run JS build first, then use the artifacts in the python builds #
    ###################################################################
    needs: [build_js]

    strategy:
      # NOTE: this matrix should build wheels across all supported envs.
      # For each entry, a corresponding test is included below that
      # will download the built wheel and run the test suite.
      #
      # If you update anything here, including the `excludes`, ensure
      # that the subsequent test matrix takes those changes into account.
      matrix:
        os:
          - ubuntu-latest # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-Readme.md
          - macos-latest # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-11-Readme.md
          - macos-10.15 # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-10.15-Readme.md
          - windows-latest # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md
          - windows-2019 # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
        python-version:
          - 3.6
          - 3.7
          - 3.8
          - 3.9
        container:
          - none  # Not manylinux, we will use this space to build the WASM assets
          - 2010
          - 2014
        node-version: [16.x]
        is-full-run:
          - ${{ startsWith(github.ref, 'refs/heads/v') || contains(github.ref, 'master') || startsWith(github.event.head_commit.message, '[ci-full]') }}
        exclude-python-run:
          - ${{ startsWith(github.event.head_commit.message, '[ci-no-python]') }}
        include-windows-run:
          - ${{ startsWith(github.event.head_commit.message, '[ci-include-windows]') }}
        exclude:
          ############################
          # Things to always exclude #
          ############################
          # Exclude manylinux python builds other than linux
          - os: macos-latest
            container: 2010
          - os: macos-latest
            container: 2014

          - os: macos-10.15
            container: 2010
          - os: macos-10.15
            container: 2014

          - os: windows-latest
            container: 2010
          - os: windows-latest
            container: 2014

          - os: windows-2019
            container: 2010
          - os: windows-2019
            container: 2014

          # Exclude non-manylinux builds on linux
          - os: ubuntu-latest
            container: none

          # Exclude windows Python 3.6
          - os: windows-latest
            python-version: 3.6
          - os: windows-2019
            python-version: 3.6

          ##############################################
          # Things to exclude if not a full matrix run #
          ##############################################
          # Exclude manylinux2010 python builds
          - is-full-run: false
            container: 2010

          # Exclude python builds if set
          - exclude-python-run: true

          # Exclude windows builds if set
          - include-windows-run: false
            os: windows-latest

          - include-windows-run: false
            os: windows-2019

          # Exclude Windows 2019 bulds
          - is-full-run: false
            os: windows-2019

          # Exclude Macos 10.15 bulds
          - is-full-run: false
            os: macos-10.15

          # Exclude Python 3.6, 3.7, and 3.8 builds
          - is-full-run: false
            python-version: 3.6

          - is-full-run: false
            python-version: 3.7

          - is-full-run: false
            python-version: 3.8


    ##################################
    # Setup matrix job configuration #
    ##################################
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    #####################################################
    # Conditionals                                      #
    # --------------------------------------------------#
    # Here is a reference for conditionals used         #
    #                                                   #
    # Operating system:                                 #
    #   if: ${{ runner.os == 'Linux' }}                 #
    #   if: ${{ runner.os == 'macOS' }}                 #
    #   if: ${{ runner.os == 'Windows' }}               #
    #                                                   #
    #####################################################

    ################
    # JS Artifacts #
    ################
    # TODO
    # - uses: actions/download-artifact@v3
    #   with:
    #     name: nbextension-build
    #     python: python/perspective/perspective/nbextension

    # TODO
    # - uses: actions/download-artifact@v3
    #   with:
    #     name: labextension-build
    #     python: python/perspective/perspective/labextension

    ##########
    # Caches #
    ##########
    ################
    # Yarn Cache
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Setup yarn cache
      uses: actions/cache@v3
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    ################
    # Pip Cache
    - name: Setup pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-
      if: ${{ runner.os != 'Linux' }}  # skip on manylinux

    ################
    # Homebrew Cache
    - name: Setup homebrew cache
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Caches/Homebrew/boost--*
          ~/Library/Caches/Homebrew/downloads/*--boost-*
        key: brew-${{ hashFiles('cpp/perspective/CMakeLists.txt') }}
        restore-keys: brew-
      if: ${{ runner.os == 'macOS' }}

    ################
    # vcpkg Cache
    - name: Setup vcpkg cache
      uses: actions/cache@v3
      with:
        path: |
          C:\Users\runneradmin\AppData\Local\vcpkg\archives
          C:\vcpkg\packages\
          C:\vcpkg\downloads\
          C:\vcpkg\buildtrees\
          C:\vcpkg\ports\
        key: vcpkg-${{ hashFiles('cpp/perspective/CMakeLists.txt') }}
        restore-keys: vcpkg-
      if: ${{ runner.os == 'Windows' }}

    ################
    # Build Assets
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}-${{ matrix.os }}
      if: ${{ runner.os != 'Linux' }}  # skip on manylinux2014

    ###############################
    # Language and Compiler Setup #
    ###############################
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
      if: ${{ runner.os != 'Linux' }}  # skip on manylinux2014

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
        cache-dependency-path: yarn.lock
      if: ${{ runner.os != 'Linux' }}  # skip on manylinux2014

    ################
    # Dependencies #
    ################
    ################
    # JS
    - name: Install yarn
      run: npm install -g yarn
      if: ${{ runner.os != 'Linux' }}

    - name: Install js dependencies
      run: yarn
      env:
        PSP_SKIP_EMSDK_INSTALL: 1

    ################
    # Python
    - name: Install python dependencies
      run: python -m pip install --upgrade pip wheel setuptools "jupyterlab>=3.4" numpy "pyarrow>=5"
      if: ${{ runner.os != 'Linux' }}  # skip on manylinux2014

    ################
    # Linux
    # NOTE: Not necessary because docker images prebuilt.
    # If we remove docker images, we will need to reenable
    # this.
    # - name: Linux init steps
    #   run: sudo node scripts/install_tools.js
    #   if: ${{ runner.os == 'Linux' }}

    ################
    # Mac
    - name: Mac init steps
      run: env HOMEBREW_NO_AUTO_UPDATE=1 brew install boost
      if: ${{ runner.os == 'macOS' }}

    ################
    # Windows
    - name: Windows init steps (vc142)
      run: |
          vcpkg.exe install boost-algorithm boost-filesystem boost-multi-index boost-multiprecision boost-program-options boost-system boost-unordered boost-uuid
          vcpkg.exe integrate install
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
        VCPKG_DEFAULT_TRIPLET: x64-windows
        VCPKG_PLATFORM_TOOLSET: v142
      if: ${{ matrix.os == 'windows-2019' }}

    - name: Windows init steps (vc143)
      run: |
          vcpkg.exe install boost-algorithm boost-filesystem boost-multi-index boost-multiprecision boost-program-options boost-system boost-unordered boost-uuid
          vcpkg.exe integrate install
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
        VCPKG_DEFAULT_TRIPLET: x64-windows
        VCPKG_PLATFORM_TOOLSET: v143
      if: ${{ matrix.os == 'windows-latest' }}

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~ Build Pipelines ~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    ########
    # Linux
    - name: Python Wheel Steps (Linux)
      run: yarn _wheel_python --ci
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
        MANYLINUX: ${{ matrix.container }}
        PSP_DOCKER: 1
      if: ${{ matrix.os == 'ubuntu-latest' }}

    ########
    # Macos
    - name: Python Build Steps (Macos)
      run: yarn _wheel_python --ci --macos
      # run: yarn build_python --ci
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
        PSP_USE_CCACHE: 1
      if: ${{ runner.os == 'macOS' }}

    - name: Python SDist Steps
      run: |
        cd python/perspective/
        rm -rf perspective/table/*.{so,dll}
        python3 setup.py sdist
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
      if: ${{ matrix.os == 'macos-latest' }}

    ##########
    # Windows
    - name: Python Build Steps (Windows vc14.2)
      run: yarn _wheel_python --ci
      # run: yarn build_python --ci
      env:
        # PYTHON_VERSION: ${{ matrix.python-version }}  # omit so it uses `python3`
        PSP_GENERATOR: Visual Studio 16 2019
        PSP_VCPKG_PATH: C:/vcpkg/scripts/buildsystems/vcpkg.cmake
        PSP_USE_CCACHE: 1
      if: ${{ matrix.os == 'windows-2019' }}

    - name: Python Build Steps (Windows vc14.3)
      run: yarn _wheel_python --ci
      # run: yarn build_python --ci
      env:
        # PYTHON_VERSION: ${{ matrix.python-version }}  # omit so it uses `python3`
        PSP_GENERATOR: Visual Studio 17 2022
        PSP_VCPKG_PATH: C:/vcpkg/scripts/buildsystems/vcpkg.cmake
        PSP_USE_CCACHE: 1
      if: ${{ matrix.os == 'windows-latest' }}

    ####################
    # Upload artifacts #
    ####################
    - uses: actions/upload-artifact@v3
      with:
        name: perspective-python-dist-${{ matrix.os }}-${{ matrix.python-version }}
        path: python/perspective/dist/*.whl
      if: ${{ runner.os == 'Windows' }}

    - uses: actions/upload-artifact@v3
      with:
        name: perspective-python-dist-${{ matrix.os }}-${{ matrix.python-version }}
        path: python/perspective/wheelhouse/*.whl
      if: ${{ runner.os != 'Windows' }}

    - uses: actions/upload-artifact@v3
      with:
        name: perspective-python-sdist
        path: python/perspective/dist/*.tar.gz
      if: ${{ matrix.os == 'macos-latest' }}

  ##########################################################################################################################
  ##########################################################################################################################

  ###############################################
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~~~|##########|~~~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~~~|##|~~~~~~~~~~~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~~~|##|~~~~~~~~~~~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~~~|##########|~~~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~~~~~~~~~~~|##|~~~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~~~|##|~~~~|##|~~~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~~~|##########|~~~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  # Stage Five - Test combined JS/Python Assets #
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  test_js_and_python:
    ###################################################################
    # Run JS build first, then use the artifacts in the python builds #
    ###################################################################
    needs: [build_js, build_python]

    strategy:
      matrix:
        os:
          - ubuntu-latest # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-Readme.md
        python-version:
          - 3.9
        node-version: [16.x]
        exclude-python-run:
          - ${{ startsWith(github.event.head_commit.message, '[ci-no-python]') }}
        exclude:
          # Exclude if skippingpython
          - exclude-python-run: true

    ##################################
    # Setup matrix job configuration #
    ##################################
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - uses: actions/download-artifact@v3
      with:
        name: perspective-build
        path: packages/perspective/dist/

    - uses: actions/download-artifact@v3
      with:
        name: perspective-jupyterlab-build
        path: packages/perspective-jupyterlab/dist/

    - uses: actions/download-artifact@v3
      with:
        name: perspective-viewer-d3fc-build
        path: packages/perspective-viewer-d3fc/dist

    - uses: actions/download-artifact@v3
      with:
        name: perspective-viewer-datagrid-build
        path: packages/perspective-viewer-datagrid/dist

    - uses: actions/download-artifact@v3
      with:
        name: perspective-workspace-build
        path: packages/perspective-workspace/dist

    - uses: actions/download-artifact@v3
      with:
        name: perspective-viewer-build
        path: rust/perspective-viewer/dist

    # TODO
    # - uses: actions/download-artifact@v3
    #   with:
    #     name: nbextension-build
    #     python: python/perspective/perspective/nbextension

    # TODO
    # - uses: actions/download-artifact@v3
    #   with:
    #     name: labextension-build
    #     python: python/perspective/perspective/labextension

    ##########
    # Caches #
    ##########
    ################
    # Yarn Cache
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Setup yarn cache
      uses: actions/cache@v3
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    ################
    # Pip Cache
    - name: Setup pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    ###############################
    # Language and Compiler Setup #
    ###############################
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
        cache-dependency-path: yarn.lock

    ################
    # Dependencies #
    ################
    ################
    # JS
    - name: Install yarn
      run: npm install -g yarn

    - name: Install js dependencies
      run: yarn --frozen-lockfile
      env:
        PSP_SKIP_EMSDK_INSTALL: 1

    ################
    # Python
    - name: Install python dependencies
      run: python -m pip install --upgrade "jupyterlab==3.3.4" "ipywidgets>=7.7"

    # Download artifact
    - uses: actions/download-artifact@v3
      with:
        name: perspective-python-dist-${{ matrix.os }}-${{ matrix.python-version }}

    # Install artifact
    - name: Install wheel
      run: python -m pip install -U *.whl --target python/perspective

    - name: Install puppeteer
      run: yarn add -W --dev puppeteer@9.0.0

    - name: Install perspective-jupyterlab labextension
      run: jupyter labextension install packages/perspective-jupyterlab

    - name: Run Jupyterlab tests
      run: yarn test_js --jupyter --debug
      env:
        PACKAGE: perspective-jupyterlab

  ##########################################################################################################################
  ##########################################################################################################################

  ########################################
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~|##########|~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~|##|~~~~~~~~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~|##|~~~~~~~~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~|##########|~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~|##|~~~~|##|~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~|##|~~~~|##|~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~|##########|~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  # Stage Six - Test Python wheel Assets #
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  test_python:
    ######################################################################
    # Run Python build first, then use the artifacts in the python tests #
    ######################################################################
    needs: [build_python]

    strategy:
      matrix:
        os:
          - ubuntu-latest # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-Readme.md
          - macos-latest # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-11-Readme.md
          - macos-10.15 # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-10.15-Readme.md
          - windows-latest # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md
          - windows-2019 # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
        python-version:
          - 3.6
          - 3.7
          - 3.8
          - 3.9
        node-version: [16.x]
        is-full-run:
          - ${{ startsWith(github.ref, 'refs/heads/v') || contains(github.ref, 'master') || startsWith(github.event.head_commit.message, '[ci-full]') }}
        exclude-python-run:
          - ${{ startsWith(github.event.head_commit.message, '[ci-no-python]') }}
        include-windows-run:
          - ${{ startsWith(github.event.head_commit.message, '[ci-include-windows]') }}
        exclude:
          ############################
          # Things to always exclude #
          ############################
          # Exclude windows Python 3.6
          - os: windows-latest
            python-version: 3.6
          - os: windows-2019
            python-version: 3.6

          ##############################################
          # Things to exclude if not a full matrix run #
          ##############################################
          # Exclude if skippingpython
          - exclude-python-run: true

          # Exclude if skipping windows
          - include-windows-run: false
            os: windows-latest

          - include-windows-run: false
            os: windows-2019

          # Exclude Windows 2019 bulds
          - is-full-run: false
            os: windows-2019

          # Exclude Macos 10.15 bulds
          - is-full-run: false
            os: macos-10.15

          # Exclude Python 3.6, 3.7, and 3.8 builds
          - is-full-run: false
            python-version: 3.6

          - is-full-run: false
            python-version: 3.7

          - is-full-run: false
            python-version: 3.8


    ##################################
    # Setup matrix job configuration #
    ##################################
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    ##########
    # Caches #
    ##########
    ################
    # Yarn Cache
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Setup yarn cache
      uses: actions/cache@v3
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    ################
    # Pip Cache
    - name: Setup pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    ###############################
    # Language and Compiler Setup #
    ###############################
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
        cache-dependency-path: yarn.lock

    ################
    # Dependencies #
    ################
    ################
    # JS
    - name: Install yarn
      run: npm install -g yarn

    - name: Install js dependencies
      run: yarn
      env:
        PSP_SKIP_EMSDK_INSTALL: 1

    ################
    # Python
    - name: Install python dependencies
      run: python -m pip install --upgrade pip wheel setuptools "jupyterlab>=3.4" numpy "pyarrow>=5" pytest pytest-cov mock Faker psutil pytest-tornado pytz

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~ Build Pipelines ~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #################
    # Python - Test #
    #################
    # Download artifact
    - uses: actions/download-artifact@v3
      with:
        name: perspective-python-dist-${{ matrix.os }}-${{ matrix.python-version }}

    # Install artifact in-place so tests work as-is
    - name: Install wheel
      run: python -m pip install -U *.whl --target python/perspective
      if: ${{ runner.os != 'Windows' }}

    - name: Install wheel (windows)
      run: python -m pip install -U (Get-ChildItem .\*.whl | Select-Object -Expand FullName)
      if: ${{ runner.os == 'Windows' }}

    # Run tests
    - name: Python Test Steps
      run: yarn test_python

  ##########################################################################################################################
  ##########################################################################################################################

  ##########################################
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~|#############|~~~~~~~~~~~#
  #~~~~~~~~~~~~~~|#|~~~~~~~/##/~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~|#|~~~~~/##/~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~~~~~~/##/~~~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~~~~/##/~~~~~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~~/##/~~~~~~~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~/##/~~~~~~~~~~~~~~~~~~~~~~#
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  # Stage Seven - Test Python sdist Assets #
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  test_python_sdist:
    ######################################################################
    # Run Python build first, then use the artifacts in the python tests #
    ######################################################################
    needs: [build_python]

    strategy:
      matrix:
        os:
          - ubuntu-latest # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-Readme.md
        python-version:
          - 3.9
        exclude-python-run:
          - ${{ startsWith(github.event.head_commit.message, '[ci-no-python]') }}
        exclude:
          # Don't run if skipping python
          - exclude-python-run: true

    ##################################
    # Setup matrix job configuration #
    ##################################
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    ##########
    # Caches #
    ##########
    ################
    # Yarn Cache
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Setup yarn cache
      uses: actions/cache@v3
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    ################
    # Pip Cache
    - name: Setup pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    ###############################
    # Language and Compiler Setup #
    ###############################
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
        cache-dependency-path: yarn.lock

    ################
    # Dependencies #
    ################
    ################
    # JS
    - name: Install yarn
      run: npm install -g yarn

    - name: Install js dependencies
      run: yarn --frozen-lockfile
      env:
        PSP_SKIP_EMSDK_INSTALL: 1

    ################
    # Linux
    - name: Linux init steps
      run: sudo node scripts/install_tools.js

    ################
    # Python
    - name: Install python dependencies
      run: python -m pip install --upgrade pip wheel setuptools "jupyterlab>=3.4" numpy "pyarrow>=5" pytest pytest-cov mock Faker psutil pytest-tornado pytz

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~ Build Pipelines ~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    # Download sdist
    - uses: actions/download-artifact@v3
      with:
        name: perspective-python-sdist

    # Install sdist 
    - name: Install sdist 
      run: python -m pip install perspective*.tar.gz

    # Test sdist 
    - name: Run tests against from-scratch sdist build
      run: python -m pytest -vvv `python3 -c "import sysconfig; print(sysconfig.get_path('purelib'))"`/perspective/tests --ignore=`python3 -c "import sysconfig; print(sysconfig.get_path('purelib'))"`/perspective/tests/client_mode

  ##########################################################################################################################
  ##########################################################################################################################
